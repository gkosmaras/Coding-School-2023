@page "/customer"
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

<PageTitle>Customers - Pet Shop Retail System</PageTitle>
<h1 class="mb-5">Customers</h1>

@if (loading)
{
    <Spinner />
}
else
{

    <button class="btn btn-primary mb-5" @onclick="AddCustomer">Add new customer</button>

    <div class="table-responsive">

        <table class="table table-dark table-striped">

            <thead>
                <tr>
                    <th>Name</th>
                    <th>Surname</th>
                    <th>Phone</th>
                    <th>Tin</th>
                    <th>Action</th>
                </tr>
            </thead>

            <tbody>
                @foreach (var cus in customer)
                {
                    <tr>
                        <td>@cus.Name</td>
                        <td>@cus.Surname</td>
                        <td>@cus.Phone</td>
                        <td>@cus.Tin</td>
                        <td>
                            <button class="btn btn-warning" @onclick="() => EditCustomer(cus)">Edit</button>
                            <button class="btn btn-danger" @onclick="() => DeleteCustomer(cus)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>

        </table>

    </div>

}

@code {

    private List<CustomerDto> customer = new();

    bool loading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        if (customer == null)
        {
            throw new ArgumentNullException();
        }
        await LoadItemsFromServer();
        loading = false;
    }

    private async Task LoadItemsFromServer()
    {
        customer = await httpClient.GetFromJsonAsync<List<CustomerDto>>("customer");
    }

    private void AddCustomer()
    {
        navigationManager.NavigateTo("customer/edit");
    }

    private void EditCustomer(CustomerDto customer)
    {
        navigationManager.NavigateTo($"customer/edit/{customer.Id}");
    }

    private async Task DeleteCustomer(CustomerDto customer)
    {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Confirm customer deletion?");
        if (confirm)
        {
            var response = await httpClient.DeleteAsync($"customer/{customer.Id}");
            response.EnsureSuccessStatusCode();
            await LoadItemsFromServer();
        }

    }

}
