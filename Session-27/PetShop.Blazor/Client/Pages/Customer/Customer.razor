@page "/customer"
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

<h3>Customer</h3>

@if (loading)
{
    <div id="app">
        <div style="position:absolute; top:30vh; width:100%; text-align:center">
            <h1>Customer list</h1>
            <div style="display:flex; gap:10px; justify-content:center; align-items:center">
                <div class="spinner-border" role="status"></div>
                The page is loading...
            </div>
        </div>
    </div>
}
else
{
    <button class="btn btn-primary" @onclick="AddCustomer">Create</button>
    <table class=" table table-striped table-hover">
        <thead>
            <tr>
                <th>Name</th>
                <th>Surname</th>
                <th>Phone</th>
                <th>Tin</th>
                <th>Action</th>
            </tr>
        </thead>
                <tbody>
                    @foreach (var cus in customer)
                    {
                        <tr>
                            <td>@cus.Name</td>
                            <td>@cus.Surname</td>
                            <td>@cus.Phone</td>
                            <td>@cus.Tin</td>
                            <td>
                                <button class="btn btn-primary" @onclick="() => EditCustomer(cus)">Edit</button>
                                <button class="btn btn-danger" @onclick="() => DeleteCustomer(cus)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
    </table>
}

@code {
    private List<CustomerDto> customer = new ();
    bool loading { get; set; } = true;
    protected override async Task OnInitializedAsync()
    {
        if (customer == null)
        {
            throw new ArgumentNullException();
        }
        await LoadItemsFromServer();
        loading = false;
    }
    private async Task LoadItemsFromServer()
    {
        customer = await httpClient.GetFromJsonAsync<List<CustomerDto>>("customer");
    }
    private void AddCustomer()
    {
        navigationManager.NavigateTo("customer/edit");
    }
    private void EditCustomer(CustomerDto customer)
    {
        navigationManager.NavigateTo($"customer/edit/{customer.Id}");
    }
    private async Task DeleteCustomer(CustomerDto customer)
    {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Confirm customer deletion?");
        if (confirm)
        {
            var response = await httpClient.DeleteAsync($"customer/{customer.Id}");
            response.EnsureSuccessStatusCode();
            await LoadItemsFromServer();
        }

    }
}
