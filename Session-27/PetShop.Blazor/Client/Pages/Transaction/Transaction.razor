@using PetShop.Models;
@using PetShop.Models.Enums;
@using PetShop.Blazor.Shared.DTO.Transaction;

@page "/transaction"
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

<h1>Transaction</h1>

@if (isLoading)
{
    <div>
        <div class="spinner-border" role="status"></div>
        The page is loading...
    </div>
}
else
{

    <button class="btn btn-primary" @onclick="CreateItem">Add new transaction</button>

    <table class="table">

        <thead>
            <tr>
                <th>Date</th>
                <th>Pet</th>
                <th>Pet Price</th>
                <th>Pet Food</th>
                <th>Pet Food QTY</th>
                <th>Pet Food Price</th>
                <th>Total Price</th>
                <th>Customer</th>
                <th>Employee</th>
                <th>Actions</th>
            </tr>

        </thead>

        <tbody>
            @foreach (var transaction in transactions)
            {
                <tr>
                    <td>@transaction.Date</td>
                    <td>@transaction.PetBreed</td>
                    <td>@transaction.PetPrice</td>
                    <td>@transaction.PetFood</td>
                    <td>@transaction.PetFoodQty</td>
                    <td>@transaction.PetFoodPrice</td>
                    <td>@transaction.TotalPrice</td>
                    <td>@transaction.CustomerName @transaction.CustomerSurname (@transaction.CustomerId)</td>
                    <td>@transaction.EmployeeName @transaction.EmployeeSurname (@transaction.EmployeeId)</td>

                    <td>
                        <button class="btn btn-primary" @onclick="()=> EditItem(transaction)">Edit</button>
                        <button class="btn btn-danger" @onclick="()=> DeleteItem(transaction)">Delete</button>
                    </td>
                </tr>

            }
        </tbody>

    </table>

}

@code {
    private List<TransactionDto> transactions = new();

    bool isLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadItemsFromServer();
        isLoading = false;
    }

    private async Task LoadItemsFromServer()
    {
        transactions = await httpClient.GetFromJsonAsync<List<TransactionDto>>("transaction");
    }

    private void CreateItem()
    {
        navigationManager.NavigateTo("transaction/edit");
    }

    private void EditItem(TransactionDto transaction)
    {
        navigationManager.NavigateTo($"transaction/edit/{transaction.Id}");
    }

    private async Task DeleteItem(TransactionDto transaction)
    {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Delete Item. Are you sure?");
        if (confirm)
        {
            var response = await httpClient.DeleteAsync($"transaction/{transaction.Id}");
            response.EnsureSuccessStatusCode();
            await LoadItemsFromServer();
        }
    }
}