@using PetShop.Models;
@using PetShop.Models.Enums;
@using PetShop.Blazor.Shared.DTO.Pet;

@page "/pet/edit/{Id:int?}"

@inject HttpClient httpClient
@inject NavigationManager navigationManager

@if (Pet == null)
{
    <Spinner />
}
else
{

    @if (Id == null)
    {
        <PageTitle>New Pet - Pet Shop Retail System</PageTitle>
        <h1 class="mb-5">New Pet</h1>
    }
    else
    {
        <PageTitle>Edit Pet - Pet Shop Retail System</PageTitle>
        <h1 class="mb-5">Edit Pet</h1>
    }

    <div class="row">

        <div class="col-md-6 mb-3">
            <label class="form-label">Pet Breed</label>
            <input class="form-control" placeholder="Enter pets's breed" @bind="@Pet.Breed" required />
        </div>

        <div class="col-md-6 mb-3">
            <label class="form-label">Animal Type</label>
            <select class="form-select" @bind="Pet.AnimalType">
                @foreach (var enumValue in Enum.GetValues<AnimalType>())
                {
                    <option value="@enumValue">@enumValue</option>
                }
            </select>
        </div>

        <div class="col-md-6 mb-3">
            <label class="form-label">Pet Status</label>
            <select class="form-select" @bind="Pet.PetStatus">
                @foreach (var enumValue in Enum.GetValues<PetStatus>())
                {
                    <option value="@enumValue">@enumValue</option>
                }
            </select>
        </div>

        <div class="col-md-6 mb-3">
            <label class="form-label">Pet Price</label>
            <input class="form-control" @bind="@Pet.Price" required />
        </div>

        <div class="col-md-6 mb-3">
            <label class="form-label">Pet Cost</label>
            <input class="form-control" @bind="@Pet.Cost" required />
        </div>

    </div>

    <div class="row">
        <div class="col-md-6">
            <button class="btn btn-success" @onclick="OnSave">Save</button>
            <button class="btn btn-warning" @onclick="OnCancel">Cancel</button>
        </div>
    </div>

    <style>
        input:required:valid {
            border-color: green;
            border-width: 3px;
        }

            input:required:invalid {
                border-color: #c00000;
            border-width: 5px;
            }
    </style>
}


@code {

    [Parameter] public int? Id { get; set; }

    PetEditDto? Pet { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id == null)
        {
            Pet = new();
        }
        else
        {
            Pet = await httpClient.GetFromJsonAsync<PetEditDto>($"pet/{Id}");
        }
    }

    private void OnCancel()
    {
        navigationManager.NavigateTo("pet");
    }

    private async Task OnSave()
    {
        HttpResponseMessage? response = null;
        if (Id == null)
        {
            response = await httpClient.PostAsJsonAsync("pet", Pet);
        }
        else
        {
            response = await httpClient.PutAsJsonAsync("pet", Pet);
        }

        response.EnsureSuccessStatusCode();
        navigationManager.NavigateTo("pet");
    }

}
