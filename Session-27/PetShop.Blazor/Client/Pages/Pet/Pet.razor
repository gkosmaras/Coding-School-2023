@using PetShop.Models;
@using PetShop.Models.Enums;
@using PetShop.Blazor.Shared.DTO.Pet;

@page "/pet"
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

@*<PageTitle>Pet List</PageTitle>*@

<h1>Pet List</h1>

@if (isLoading)
{
    @*<div id="app">
        <div style="position:absolute; top:30vh; width:100%; text-align:center">
            <h1>Pet list</h1>
            <div style="display:flex; gap:10px; justify-content:center; align-items:center">
                <div class="spinner-border" role="status"></div>
                The page is loading...
            </div>
        </div>
    </div>*@
}
else
{

    <button class="btn btn-primary" @onclick="CreateItem">Create</button>

    <table class="table table-striped table-hover">

        <thead>
            <tr>
                <th>Breed</th>
                <th>Animal Type</th>
                <th>Pet Status</th>
                <th>Price</th>
                <th>Cost</th>
                <th>Actions</th>
            </tr>

        </thead>

        <tbody>
            @foreach (var item in petList)
            {
                <tr>
                    <td>@item.Breed</td>
                    <td>@item.AnimalType</td>
                    <td>@item.PetStatus</td>
                    <td>@item.Price</td>
                    <td>@item.Cost</td>
                    <td>
                        <button class="btn btn-primary" @onclick="()=> EditItem(item)">Edit</button>
                        <button class="btn btn-danger" @onclick="()=> DeleteItem(item)">Delete</button>
                    </td>
                </tr>

            }
        </tbody>

    </table>

}

@code {
    private List<PetDto> petList = new();

    bool isLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadItemsFromServer();
        isLoading = false;
    }

    private async Task LoadItemsFromServer()
    {
        petList = await httpClient.GetFromJsonAsync<List<PetDto>>("pet");
    }

    private void CreateItem()
    {
        navigationManager.NavigateTo("pet/edit");
    }

    private void EditItem(PetDto pet)
    {
        navigationManager.NavigateTo($"pet/edit/{pet.Id}");
    }

    private async Task DeleteItem(PetDto pet)
    {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Delete Item. Are you sure?");
        if (confirm)
        {
            var response = await httpClient.DeleteAsync($"pet/{pet.Id}");
            response.EnsureSuccessStatusCode();
            await LoadItemsFromServer();
        }
    }
}