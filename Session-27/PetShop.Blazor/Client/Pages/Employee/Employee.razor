@page "/employee"
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime


<h3>Employee</h3>

@if (loading)
{
    <p>Loading...</p>
}
else
{
    <button class="btn btn-primary" @onclick="AddEmployee">Create</button>
    <table class=" table table-striped table-hover">
        <thead>
            <tr>
                <th>Name</th>
                <th>Surname</th>
                <th>Type of Employee</th>
                <th>Monthly Salary</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ee in employee)
            {
                <tr>
                    <td>@ee.Name</td>
                    <td>@ee.Surname</td>
                    <td>@ee.EmployeeType</td>
                    <td>@ee.SalaryPerMonth</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditEmployee(ee)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteEmployee(ee)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private List<EmployeeDto> employee = new();
    bool loading { get; set; } = true;
    protected override async Task OnInitializedAsync()
    {
        if (employee == null)
        {
            throw new ArgumentNullException();
        }
        await LoadItemsFromServer();
        loading = false;
    }
    private async Task LoadItemsFromServer()
    {
        employee = await httpClient.GetFromJsonAsync<List<EmployeeDto>>("employee");
    }
    private void AddEmployee()
    {
        navigationManager.NavigateTo("employee/edit");
    }
    private void EditEmployee(EmployeeDto employee)
    {
        navigationManager.NavigateTo($"employee/edit/{employee.Id}");
    }
    private async Task DeleteEmployee(EmployeeDto employee)
    {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Confirm employee deletion?");
        if (confirm)
        {
            var response = await httpClient.DeleteAsync($"employee/{employee.Id}");
            response.EnsureSuccessStatusCode();
            await LoadItemsFromServer();
        }
    }
}
