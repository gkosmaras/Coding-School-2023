@page "/employee"
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

@if (loading)
{
    <Spinner />
}
else
{

    <PageTitle>Employees - Pet Shop Retail System</PageTitle>
    <h1 class="mb-5">Employees</h1>

    <button class="btn btn-primary mb-5" @onclick="AddEmployee">Add new employee</button>

    <div class="table-responsive">

        <table class="table table-dark table-striped">

            <thead>

                <tr>
                    <th>Name</th>
                    <th>Surname</th>
                    <th>Type of Employee</th>
                    <th>Monthly Salary</th>
                    <th>Action</th>
                </tr>

            </thead>

            <tbody>

                @foreach (var employee in employees)
                {
                    <tr>
                        <td>@employee.Name</td>
                        <td>@employee.Surname</td>
                        <td>@employee.EmployeeType</td>
                        <td>@employee.SalaryPerMonth</td>
                        <td>
                            <button class="btn btn-warning" @onclick="() => EditEmployee(employee)">Edit</button>
                            <button class="btn btn-danger" @onclick="() => DeleteEmployee(employee)">Delete</button>
                            <button class="btn btn-secondary" @onclick="() => DetailEmployee(employee)">Details</button>
                        </td>
                    </tr>
                }

            </tbody>

        </table>

    </div>
}
@code {

    private List<EmployeeDto> employees = new();

    bool loading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        if (employees == null)
        {
            throw new ArgumentNullException();
        }
        await LoadItemsFromServer();

        loading = false;
    }

    private async Task LoadItemsFromServer()
    {
        employees = await httpClient.GetFromJsonAsync<List<EmployeeDto>>("employee");
    }

    private void AddEmployee()
    {
        navigationManager.NavigateTo("employee/edit");
    }

    private void EditEmployee(EmployeeDto employee)
    {
        navigationManager.NavigateTo($"employee/edit/{employee.Id}");
    }

    private void DetailEmployee(EmployeeDto employee)
    {
        navigationManager.NavigateTo($"employee/detail/{employee.Id}");
    }

    private async Task DeleteEmployee(EmployeeDto employee)
    {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Confirm employee deletion?");
        if (confirm)
        {
            var response = await httpClient.DeleteAsync($"employee/{employee.Id}");
            response.EnsureSuccessStatusCode();
            await LoadItemsFromServer();
        }
    }

}
